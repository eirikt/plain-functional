package land.plainfunctional.algebraicstructure;

import java.util.function.BinaryOperator;
import java.util.function.Function;

import land.plainfunctional.util.Arguments;

/**
 * A <b>semigroup</b> is an <i>associative magma</i>.
 *
 * <p>
 * <i>Formally:</i> To qualify as a semigroup, the set 𝕊 and the binary operation • must be associative:<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;∀(𝓍,𝓎,𝓏) ∈ 𝕊 ⇒ (𝓍 • 𝓎) • 𝓏 = 𝓍 • (𝓎 • 𝓏)
 * </p>
 *
 * <p>
 * Associativity means that all (applications of the binary) operations may be applied in whatever order,
 * as long as the order of the values do not change.
 * This requirement is enforced by the {@link java.util.LinkedHashSet} constructor argument,
 * which preserves the insertion order when it is iterated.
 * For other ordering schemes, the requirement is enforced by the {@link java.util.SortedSet} constructor argument,
 * enumerating the semigroup elements via a the {@link java.util.SortedSet}'s mandatory {@link java.util.Comparator} member instance,
 * which may be set via one of the {@link java.util.SortedSet}'s constructors.
 * </p>
 *
 * <p>...</p>
 *
 * <p>
 * A <i>free</i> semigroup, 𝕄<sub>X</sub>, on a set X,
 * is the "most general possible" semigroup generated by X
 * (i.e., there are no relations or axioms imposed on the generators).
 * </p>
 *
 * <p>
 * When regarding <i>types as sets of values</i>,
 * one may treat types as (value) generators, predefined by the Java type system.<br>
 * So, a free semigroup, 𝕄<sub><code>T</code></sub>, for the (parametric/generic) type <code>T</code>,
 * is expressed as <code>FreeSemigroup&lt;T&gt;</code>.
 * </p>
 *
 * <p>...</p>
 *
 * <p>
 * <i>Disclaimer:</i><br>
 * Finding myself kind of on a limb when it comes to the theoretical concepts and terms regarding this algebraic <i>free</i> thingy...<br>
 * I think the use of it here is mostly correct... hope so.
 * </p>
 *
 * @param <T> The semigroup type, all values of this type belongs to the semigroup
 * @see <a href="https://en.wikipedia.org/wiki/Free_monoid">Free semigroup (Wikipedia)</a>
 */
public class FreeSemigroup<T> {

    /**
     * This semigroup's binary operation.
     *
     * <p>
     * The totality/closure property which the binary operation also must inhibit,
     * is enforced via the single-parametric {@link BinaryOperator} class,
     * in addition to constraints defined in the <code>append</code> method.
     * </p>
     */
    public final BinaryOperator<T> binaryOperation;

    /**
     * @param binaryOperation associative and closed binary operation
     */
    public FreeSemigroup(BinaryOperator<T> binaryOperation) {
        Arguments.requireNotNull(binaryOperation, "A semigroup must have an identity element - a neutral element");
        this.binaryOperation = binaryOperation;
    }

    /**
     * @return a curried version of this semigroup's associative, closed, and binary operation
     */
    public Function<T, Function<T, T>> curriedBinaryOperation() {
        return
            (arg1) ->
                (arg2) ->
                    this.binaryOperation.apply(arg1, arg2);
    }

    /**
     * Application of this semigroup's associative, closed, and binary operation, •<br>
     * This is an <i>endofunction</i>/<i>endomorphism</i>.
     *
     * <p>
     * <i>NB! The totality property of this free semigroup is enforced by the compiler's type system.</i>
     * </p>
     *
     * @param element1 a semigroup element
     * @param element2 a semigroup element
     * @return a resulting semigroup element
     */
    public T append(T element1, T element2) {
        Arguments.requireNotNull(element1, "'element1' argument cannot be null");
        Arguments.requireNotNull(element2, "'element2' argument cannot be null");

        // No, makes 'append' not applicable when used for e.g. folding
        //if (element1.equals(element2)) {
        //    // Monoid exception for folding with the identity element as the initial value
        //    if (!element1.equals(this.identityElement)) {
        //        throw new IllegalArgumentException("Cannot append two equal element values in a semigroup");
        //    }
        //}

        return this.binaryOperation.apply(element1, element2);
    }

    /**
     * By providing a identity element, this semigroup can be promoted to a {@link FreeMonoid} instance.
     *
     * @param identityElement the monoid's identity element
     * @return a new 'FreeMonoid' instance
     */
    public FreeMonoid<T> toFreeMonoid(T identityElement) {
        return new FreeMonoid<>(this.binaryOperation, identityElement);
    }
}
