package land.plainfunctional.algebraicstructure;

import java.util.SortedSet;
import java.util.function.BinaryOperator;

import land.plainfunctional.util.Arguments;

/**
 * {@inheritDoc}
 *
 * <p>...</p>
 *
 * <p>
 * A <i>free</i> semigroup, ùïÑ<sub>X</sub>, on a set X,
 * is the "most general possible" semigroup generated by X
 * (i.e., there are no relations or axioms imposed on the generators).
 * </p>
 *
 * <p>
 * When regarding <i>types as sets of values</i>,
 * one may treat types as (value) generators, predefined by the Java type system.<br>
 * So, a free semigroup, ùïÑ<sub><code>T</code></sub>, for the (parametric/generic) type <code>T</code>,
 * is expressed as <code>FreeSemigroup&lt;T&gt;</code>.
 * </p>
 *
 * <p>...</p>
 *
 * <p>
 * <i>Disclaimer:</i><br>
 * Finding myself kind of on a limb when it comes to the theoretical concepts and terms regarding this algebraic <i>free</i> thingy...<br>
 * I think the use of it here is mostly viable... hope so.
 * </p>
 *
 * @param <T> The magma type
 * @see <a href="https://en.wikipedia.org/wiki/Free_monoid">Free semigroup (Wikipedia)</a>
 */
public class FreeSemigroup<T> extends Semigroup<T> {

    public FreeSemigroup(
        SortedSet<T> set,
        BinaryOperator<T> associativeAndClosedBinaryOperation
    ) {
        super(set, associativeAndClosedBinaryOperation);
    }

    /**
     * Application of this free semigroup's operation, an <i>endofunction</i> for <code>T</code>.
     *
     * <p>
     * <i>NB! The totality property of this free magma is enforced by the compiler's type system.</i>
     * </p>
     *
     * @param element1 a semigroup element
     * @param element2 a semigroup element
     * @return a new value
     * @throws IllegalArgumentException if the element values are equal
     */
    @Override
    public T append(T element1, T element2) {
        Arguments.requireNotNull(element1, "'element1' argument cannot be 'null'");
        Arguments.requireNotNull(element2, "'element2' argument cannot be 'null'");

        if (element1.equals(element2)) {
            throw new IllegalArgumentException("Cannot append two equal element values in a magma");
        }

        return this.closedBinaryOperation.apply(element1, element2);
    }

    /**
     * @deprecated This method will be renamed to 'toMonoid'
     */
    @Deprecated // This method will be renamed to 'toMonoid'
    public T leftFold(T identityValue) {
        T foldedValue = identityValue;
        for (T element : this.set) {
            foldedValue = append(foldedValue, element);
        }
        return foldedValue;
    }
}
